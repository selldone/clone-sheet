<!-- views/tabs/setup.ejs -->
<div class="max-w-4xl mx-auto px-4 sm:px-0">
    <div class="mb-10 text-center">
        <h2 class="text-3xl font-light text-gray-900">Setup</h2>
        <p class="text-gray-500 mt-2 text-lg font-light">Configure your connection to Selldone</p>
    </div>

    <div class="space-y-8">
        <!-- Access Token Section -->
        <div class="bg-white rounded-2xl shadow-sm overflow-hidden border border-gray-100">
            <div class="px-8 py-5 border-b border-gray-50 flex items-center">
                <div class="h-8 w-8 rounded-full bg-blue-50 flex items-center justify-center mr-4">
                    <i data-feather="key" class="h-4 w-4 text-blue-500"></i>
                </div>
                <h3 class="text-lg font-medium text-gray-800">API Access Token</h3>
            </div>

            <div class="p-8">
                <p class="text-gray-600 mb-6">
                    Generate your access token by clicking below. Once completed, you'll receive a token to paste here.
                </p>
                <a id="createTokenLink"
                   target="_blank"
                   rel="noopener noreferrer"
                   class="inline-flex items-center px-6 py-3 border border-transparent text-sm font-medium rounded-full text-white bg-blue-500 hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all duration-200 shadow-sm">
                    <i data-feather="key" class="h-4 w-4 mr-2"></i>
                    Create Access Token
                </a>
            </div>
        </div>

        <!-- Authentication Section -->
        <div class="bg-white rounded-2xl shadow-sm overflow-hidden border border-gray-100">
            <div class="px-8 py-5 border-b border-gray-50 flex items-center">
                <div class="h-8 w-8 rounded-full bg-purple-50 flex items-center justify-center mr-4">
                    <i data-feather="lock" class="h-4 w-4 text-purple-500"></i>
                </div>
                <h3 class="text-lg font-medium text-gray-800">Authentication Details</h3>
            </div>

            <div class="p-8 space-y-6">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Bearer Token</label>
                    <div class="relative">
                        <input id="tokenInput" type="text"
                               class="w-full px-4 py-3 border border-gray-200 rounded-xl shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"
                               placeholder="Paste your Bearer token here">
                        <div class="absolute inset-y-0 right-0 flex items-center pr-3 text-gray-400">
                            <i data-feather="shield" class="h-4 w-4"></i>
                        </div>
                    </div>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Shop ID</label>
                    <div class="relative">
                        <input id="shopIdInput" type="text"
                               class="w-full px-4 py-3 border border-gray-200 rounded-xl shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"
                               placeholder="Enter your Shop ID">
                        <div class="absolute inset-y-0 right-0 flex items-center pr-3 text-gray-400">
                            <i data-feather="shopping-bag" class="h-4 w-4"></i>
                        </div>
                    </div>
                </div>

                <button id="connectButton"
                        class="w-full inline-flex justify-center items-center px-5 py-3 border border-transparent text-sm font-medium rounded-xl text-white bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-all duration-200 shadow-sm">
                    <i data-feather="save" class="h-4 w-4 mr-2"></i>
                    Save & Connect
                </button>

                <div id="statusMessageContainer" class="transition-all duration-300 opacity-0 h-0 overflow-hidden">
                    <p id="statusMessage" class="text-sm text-center py-2 px-4 rounded-full bg-gray-50 inline-block"></p>
                </div>
            </div>
        </div>

        <!-- Shop Information Section -->
        <div id="shopInfoSection" class="mt-6 transition-all duration-300">
            <div class="text-center py-10">
                <div class="inline-block h-8 w-8 relative">
                    <div class="absolute inset-0 rounded-full border-2 border-blue-500 border-opacity-20"></div>
                    <div class="absolute inset-0 rounded-full border-t-2 border-blue-500 animate-spin"></div>
                </div>
                <p class="text-gray-500 mt-3 font-light">Loading shop information...</p>
            </div>
        </div>
    </div>
</div>

<script>
    // Define required scopes in an array for better maintainability
    const requiredScopes = [
        'selldone:identification',
        'backoffice:shop:read',
        'backoffice:order:read',
        'backoffice:product:read',
        'backoffice:category:read',
        'backoffice:customer:read'
    ];

    // Build the URL dynamically
    const baseUrl = 'https://selldone.com/auth/erp';
    const queryString = requiredScopes
        .map(scope => `scopes[]=${encodeURIComponent(scope)}`)
        .join('&');

    // Set the href attribute
    document.getElementById('createTokenLink').href = `${baseUrl}?${queryString}`;

    // Show status message with animation
    function showStatusMessage(message, type) {
        const container = document.getElementById("statusMessageContainer");
        const statusMessage = document.getElementById("statusMessage");

        statusMessage.textContent = message;

        // Clear all classes and add new ones
        statusMessage.className = "text-sm text-center py-2 px-4 rounded-full inline-block";

        if (type === "success") {
            statusMessage.classList.add("bg-green-50", "text-green-700");
        } else if (type === "error") {
            statusMessage.classList.add("bg-red-50", "text-red-700");
        } else if (type === "warning") {
            statusMessage.classList.add("bg-yellow-50", "text-yellow-700");
        } else {
            statusMessage.classList.add("bg-blue-50", "text-blue-700");
        }

        // Show the container
        container.classList.remove("opacity-0", "h-0");
        container.classList.add("opacity-100", "h-auto", "mt-4");
    }

    // Save Token, Fetch User & Shop Info
    document.getElementById("connectButton").addEventListener("click", async function () {
        const tokenInput = document.getElementById("tokenInput").value.trim();
        const shopIdInput = document.getElementById("shopIdInput").value.trim();

        if (!tokenInput) {
            showStatusMessage("Please enter a token", "error");
            return;
        }

        // Ensure "Bearer " prefix on token
        let token = tokenInput.startsWith("Bearer ") ? tokenInput : `Bearer ${tokenInput}`;

        try {
            showStatusMessage("Saving token...", "info");

            let tokenResponse = await fetch("/auth/set-token", {
                method: "POST",
                headers: {"Content-Type": "application/json"},
                body: JSON.stringify({token})
            });

            let tokenResult = await tokenResponse.json();
            if (!tokenResult.success) {
                showStatusMessage("Failed to save token", "error");
                return;
            }

            showStatusMessage("Fetching user info...", "info");
            let userResponse = await fetch("/user/fetch-user", {
                method: "POST",
                headers: {"Content-Type": "application/json"},
                body: JSON.stringify({token})
            });

            let userResult = await userResponse.json();
            if (!userResult.success) {
                showStatusMessage(`Failed to fetch user: ${userResult.message}`, "error");
                return;
            }

            if (!shopIdInput) {
                showStatusMessage("User data saved! Please enter a Shop ID", "warning");
                return;
            }

            showStatusMessage("Fetching shop information...", "info");
            let shopResponse = await fetch("/shop/fetch-shop", {
                method: "POST",
                headers: {"Content-Type": "application/json"},
                body: JSON.stringify({shop_id: shopIdInput, token})
            });

            let shopResult = await shopResponse.json();
            if (shopResult.success) {
                showStatusMessage("Shop connected successfully", "success");
            } else {
                showStatusMessage(`Failed to fetch shop: ${shopResult.message}`, "error");
            }
        } catch (error) {
            showStatusMessage("An error occurred", "error");
            console.error("Error:", error);
        }
    });

    // Function to render shop info UI
    function renderShopInfo(shopData) {
        const shopInfoSection = document.getElementById('shopInfoSection');

        if (shopData && shopData.success && shopData.shop) {
            const shop = shopData.shop;
            shopInfoSection.innerHTML = `
        <div class="bg-white rounded-2xl shadow-sm overflow-hidden border border-gray-100 transition-all duration-500">
          <div class="px-8 py-5 border-b border-gray-50 flex justify-between items-center">
            <div class="flex items-center">
              <div class="h-8 w-8 rounded-full bg-green-50 flex items-center justify-center mr-4">
                <i data-feather="shopping-bag" class="h-4 w-4 text-green-500"></i>
              </div>
              <h3 class="text-lg font-medium text-gray-800">Connected Shop</h3>
            </div>
            <span class="px-3 py-1 text-xs font-medium bg-green-50 text-green-700 rounded-full">Active</span>
          </div>

          <div class="p-8">
            <div class="flex items-center">
              <div class="h-20 w-20 rounded-2xl bg-gray-50 flex-shrink-0 flex items-center justify-center mr-6 overflow-hidden shadow-sm">
                ${shop.icon
                ? `<img src="${shop.icon}" alt="${shop.title}" class="h-full w-full object-cover">`
                : `<i data-feather="shopping-bag" class="h-10 w-10 text-gray-300"></i>`}
              </div>
              <div>
                <h4 class="text-xl font-medium text-gray-900">${shop.title || 'Shop'}</h4>
                ${shop.domain
                ? `<a href="https://${shop.domain}" target="_blank"
                      class="text-sm text-blue-500 hover:text-blue-600 flex items-center mt-1 transition-colors duration-200">
                      <i data-feather="external-link" class="h-3 w-3 mr-1"></i>
                      <span>${shop.domain}</span>
                    </a>`
                : ''}
<a href="https://selldone.com/shuttle/shop/${shop.id || shop.shop_id}" target="_blank"
   class="text-sm text-blue-500 hover:text-blue-600 flex items-center mt-1 transition-colors duration-200">
   <i data-feather="settings" class="h-3 w-3 mr-1"></i>
   <span>Admin Panel</span>
</a>
                <p class="text-xs text-gray-400 mt-2">ID: ${shop.id || shop.shop_id}</p>
              </div>
            </div>
          </div>
        </div>`;
        } else {
            shopInfoSection.innerHTML = `
        <div class="bg-white rounded-2xl shadow-sm overflow-hidden border border-gray-100">
          <div class="p-8">
            <div class="flex items-center">
              <div class="h-16 w-16 rounded-full bg-yellow-50 flex-shrink-0 flex items-center justify-center mr-5">
                <i data-feather="alert-circle" class="h-8 w-8 text-yellow-400"></i>
              </div>
              <div>
                <h4 class="text-lg font-medium text-gray-800">No Shop Connected</h4>
                <p class="text-gray-500 text-sm mt-1">Please enter your Shop ID and token to connect your store</p>
              </div>
            </div>
          </div>
        </div>`;
        }

        // Refresh Feather icons
        if (window.feather) {
            feather.replace();
        }
    }

    // Automatically fetch shop information on page load
    document.addEventListener('DOMContentLoaded', async function() {
        try {
            const response = await fetch("/me");
            const result = await response.json();
            renderShopInfo(result);
        } catch (error) {
            console.error("Error fetching shop info:", error);
            renderShopInfo(null);
        }
    });

    // Update the existing connect button handler to refresh shop info after saving
    const originalClickHandler = document.getElementById("connectButton").onclick;
    document.getElementById("connectButton").onclick = async function(event) {
        // Call the original handler
        if (originalClickHandler) {
            await originalClickHandler.call(this, event);
        }

        // After the original handler completes, fetch updated shop info
        try {
            const response = await fetch("/me");
            const result = await response.json();
            renderShopInfo(result);
        } catch (error) {
            console.error("Error fetching updated shop info:", error);
        }
    };
</script>

<style>
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }

    @keyframes slideUp {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }

    #shopInfoSection > div:not(.text-center) {
        animation: slideUp 0.5s cubic-bezier(0.16, 1, 0.3, 1) forwards;
    }

    .rounded-2xl {
        border-radius: 1rem;
    }

    input, button {
        font-size: 14px;
    }

    button {
        letter-spacing: 0.01em;
    }
</style>