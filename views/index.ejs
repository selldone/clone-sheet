<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Selldone API Connector</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="flex items-center justify-center min-h-screen bg-gray-100">
<div class="bg-white p-6 md:p-8 rounded-lg shadow-lg max-w-lg w-full">
    <h1 class="text-2xl font-bold text-gray-700 text-center">Selldone API Connector</h1>

    <!-- üîó Access Token Link Section -->
    <div class="mt-6 p-4 border rounded-md bg-gray-50">
        <p class="text-sm text-gray-500">
            To generate your access token, click the link below, complete the process, and then copy the token.
        </p>
        <a
                href="https://selldone.com/auth/erp?scopes[]=selldone:identification&scopes[]=backoffice:shop:read&scopes[]=backoffice:order:read&scopes[]=backoffice:order:write&scopes[]=backoffice:product:read&scopes[]=backoffice:category:read"
                target="_blank"
                rel="noopener noreferrer"
                class="block mt-2 text-blue-600 hover:underline"
        >
            Create Access Token
        </a>
    </div>

    <!-- ‚úÖ Authentication Section -->
    <div class="mt-6 space-y-4">
        <div>
            <label class="block text-sm text-gray-500 mb-1">Enter Bearer Token:</label>
            <input
                    id="tokenInput"
                    type="text"
                    class="w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Paste your Bearer token here..."
            />
        </div>

        <div>
            <label class="block text-sm text-gray-500 mb-1">Enter Shop ID:</label>
            <input
                    id="shopIdInput"
                    type="text"
                    class="w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Enter Shop ID here..."
            />
        </div>

        <button
                id="connectButton"
                class="w-full bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600 transition"
        >
            Save & Fetch Data
        </button>

        <p id="statusMessage" class="text-sm text-gray-600 mt-2 text-center"></p>
    </div>

    <!-- ‚úÖ Data Synchronization Section -->
    <div class="mt-8 border-t pt-6">
        <h2 class="text-lg font-semibold text-gray-700 text-center">Data Synchronization</h2>

        <button
                id="fetchProductsButton"
                class="w-full mt-4 bg-purple-500 text-white px-4 py-2 rounded-md hover:bg-purple-600 transition"
        >
            Sync Categories & Fetch Products
        </button>

        <p id="productsStatusMessage" class="text-sm text-gray-600 mt-2 text-center"></p>
    </div>

    <!-- ‚úÖ NocoDB Setup Section -->
    <div class="mt-8 border-t pt-6">
        <h2 class="text-lg font-semibold text-gray-700 text-center">NocoDB Setup</h2>
        <p class="text-sm text-gray-500 mt-2">
            Use the following SQL connection details in NocoDB:
        </p>
        <div class="mt-2 bg-gray-100 p-2 rounded text-sm font-mono text-blue-600">
            SQL Host: host.docker.internal<br />
            SQL Port: <%= DB_CONFIG.port %><br />
            Database: <%= DB_CONFIG.database %><br />
        </div>
    </div>
</div>

<script>
    document.getElementById("connectButton").addEventListener("click", async function () {
        const tokenInput = document.getElementById("tokenInput").value.trim();
        const shopIdInput = document.getElementById("shopIdInput").value.trim();
        const statusMessage = document.getElementById("statusMessage");

        // ‚úÖ Ensure Token is Entered
        if (!tokenInput) {
            statusMessage.textContent = "‚ùå Please enter a token.";
            return;
        }

        // ‚úÖ Ensure "Bearer " Prefix on Token
        let token = tokenInput.startsWith("Bearer ") ? tokenInput : `Bearer ${tokenInput}`;

        try {
            // ‚úÖ Step 1: Save Token
            statusMessage.textContent = "üîÑ Saving Token...";
            let tokenResponse = await fetch("/auth/set-token", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ token })
            });
            let tokenResult = await tokenResponse.json();

            if (!tokenResult.success) {
                statusMessage.textContent = "‚ùå Failed to save token.";
                return;
            }

            // ‚úÖ Step 2: Fetch User Info (Sending token in body)
            statusMessage.textContent = "üîÑ Fetching User Info...";
            let userResponse = await fetch("/user/fetch-user", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ token })
            });

            let userResult = await userResponse.json();

            if (!userResult.success) {
                statusMessage.textContent = `‚ùå Failed to fetch user info: ${userResult.message}`;
                return;
            }

            // ‚úÖ Step 3: Check Shop ID
            if (!shopIdInput) {
                statusMessage.textContent = "‚ö†Ô∏è User data saved! Please enter a Shop ID.";
                return;
            }

            // ‚úÖ Step 4: Fetch Shop Info (Sending shop_id & token)
            statusMessage.textContent = "üîÑ Fetching Shop Info...";
            let shopResponse = await fetch("/shop/fetch-shop", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ shop_id: shopIdInput, token })
            });

            let shopResult = await shopResponse.json();

            if (shopResult.success) {
                statusMessage.textContent = "‚úÖ Shop data saved successfully!";
            } else {
                statusMessage.textContent = `‚ùå Failed to fetch shop info: ${shopResult.message}`;
            }
        } catch (error) {
            statusMessage.textContent = "‚ùå Error occurred.";
            console.error("Error:", error);
        }
    });

    document.getElementById("fetchProductsButton").addEventListener("click", async function () {
        const statusMessage = document.getElementById("productsStatusMessage");
        statusMessage.textContent = "üîÑ Syncing categories first...";

        try {
            // ‚úÖ Step 1: Sync Categories
            let categoryResponse = await fetch("/categories/fetch-categories", {
                method: "POST",
                headers: { "Content-Type": "application/json" }
            });

            let categoryResult = await categoryResponse.json();

            if (!categoryResult.success) {
                statusMessage.textContent = `‚ùå Failed to fetch categories: ${categoryResult.message}`;
                return;
            }

            statusMessage.textContent = "‚úÖ Categories synced! Now fetching products...";

            // ‚úÖ Step 2: Fetch Products
            let productResponse = await fetch("/products/fetch-products", {
                method: "POST",
                headers: { "Content-Type": "application/json" }
            });

            let productResult = await productResponse.json();

            if (productResult.success) {
                statusMessage.textContent = `‚úÖ ${productResult.message}`;
            } else {
                statusMessage.textContent = `‚ùå Failed to fetch products: ${productResult.message}`;
            }
        } catch (error) {
            statusMessage.textContent = "‚ùå Error syncing data.";
            console.error("Error:", error);
        }
    });
</script>
</body>
</html>
