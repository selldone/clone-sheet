<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>Selldone API Connector</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="flex items-center justify-center min-h-screen bg-gray-100">
<div class="bg-white p-6 md:p-8 rounded-lg shadow-lg max-w-lg w-full">
    <h1 class="text-2xl font-bold text-gray-700 text-center">Selldone API Connector</h1>

    <!-- 🔗 Access Token Link Section -->
    <div class="mt-6 p-4 border rounded-md bg-gray-50">
        <p class="text-sm text-gray-500">
            To generate your access token, click the link below, complete the process, and then copy the token.
        </p>
        <a id="createTokenLink"
           target="_blank"
           rel="noopener noreferrer"
           class="block mt-2 text-blue-600 hover:underline">
            Create Access Token
        </a>
    </div>

    <!-- ✅ Authentication Section -->
    <div class="mt-6 space-y-4">
        <div>
            <label class="block text-sm text-gray-500 mb-1">Enter Bearer Token:</label>
            <input id="tokenInput" type="text"
                   class="w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                   placeholder="Paste your Bearer token here...">
        </div>
        <div>
            <label class="block text-sm text-gray-500 mb-1">Enter Shop ID:</label>
            <input id="shopIdInput" type="text"
                   class="w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                   placeholder="Enter Shop ID here...">
        </div>
        <button id="connectButton"
                class="w-full bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600 transition">
            Save & Fetch Data
        </button>
        <p id="statusMessage" class="text-sm text-gray-600 mt-2 text-center"></p>
    </div>

    <!-- ✅ Data Synchronization Section -->
    <div class="mt-8 border-t pt-6">
        <h2 class="text-lg font-semibold text-gray-700 text-center">Data Synchronization</h2>
        <button id="syncAllButton"
                class="w-full mt-4 bg-purple-500 text-white px-4 py-2 rounded-md hover:bg-purple-600 transition">
            Sync All Resources
        </button>

        <!-- Dynamic Sync Status Table -->
        <div class="mt-4 overflow-hidden border rounded-md">
            <table id="syncStatusTable" class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                <tr>
                    <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Resource</th>
                    <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                    <th scope="col" class="px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Progress</th>
                </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200" id="syncStatusTableBody">
                <!-- Table rows will be generated dynamically -->
                </tbody>
            </table>
        </div>
    </div>

    <!-- ✅ Clear Database Section -->
    <div class="mt-8 border-t pt-6">
        <h2 class="text-lg font-semibold text-gray-700 text-center">Admin Actions</h2>
        <button id="clearDatabaseButton"
                class="w-full mt-4 bg-red-500 text-white px-4 py-2 rounded-md hover:bg-red-600 transition">
            Clear All Data
        </button>
        <p id="clearStatusMessage" class="text-sm text-gray-600 mt-2 text-center"></p>
    </div>

    <!-- ✅ NocoDB Setup Section -->
    <div class="mt-8 border-t pt-6">
        <h2 class="text-lg font-semibold text-gray-700 text-center">NocoDB Setup</h2>
        <p class="text-sm text-gray-500 mt-2">
            Use the following SQL connection details in NocoDB:
        </p>
        <div class="mt-2 bg-gray-100 p-2 rounded text-sm font-mono text-blue-600">
            SQL Host: host.docker.internal<br/>
            SQL Port: <%= DB_CONFIG.port %><br/>
            Database: <%= DB_CONFIG.database %><br/>
            Example SQL Address: host.docker.internal:<%= DB_CONFIG.port %>/<%= DB_CONFIG.database %>
        </div>
    </div>
</div>

<script>
    // Resource configuration array - easily expandable
    const resources = [
        {
            id: 'categories',
            name: 'Categories',
            icon: '📁',
            endpoint: '/categories/fetch-categories'
        },
        {
            id: 'products',
            name: 'Products',
            icon: '📦',
            endpoint: '/products/fetch-products'
        },
        {
            id: 'customers',
            name: 'Customers',
            icon: '👥',
            endpoint: '/customers/fetch-customers'
        },
        {
            id: 'shop_data',
            name: 'Shop Data',
            icon: '🏪',
            endpoint: '/shop-data/fetch-shop-data'
        }
        // Add new resources here
    ];

    // Generate table rows for each resource
    function generateSyncStatusTable() {
        const tableBody = document.getElementById('syncStatusTableBody');
        tableBody.innerHTML = '';

        resources.forEach(resource => {
            const row = document.createElement('tr');
            row.id = `${resource.id}-row`;

            // Resource name cell with icon
            const nameCell = document.createElement('td');
            nameCell.className = 'px-4 py-3 whitespace-nowrap';
            nameCell.innerHTML = `<div class="flex items-center">
                <span class="mr-2">${resource.icon}</span>
                <span class="font-medium">${resource.name}</span>
            </div>`;

            // Status message cell
            const statusCell = document.createElement('td');
            statusCell.className = 'px-4 py-3 whitespace-nowrap text-sm';
            statusCell.id = `${resource.id}-status`;
            statusCell.textContent = 'Waiting...';

            // Progress cell with percentage
            const progressCell = document.createElement('td');
            progressCell.className = 'px-4 py-3 whitespace-nowrap text-right text-sm';

            // Progress bar container
            const progressBarContainer = document.createElement('div');
            progressBarContainer.className = 'flex items-center justify-end';

            // Progress bar
            const progressBar = document.createElement('div');
            progressBar.className = 'w-16 bg-gray-200 rounded-full h-2.5 mr-2';

            const progressBarInner = document.createElement('div');
            progressBarInner.className = 'bg-blue-600 h-2.5 rounded-full';
            progressBarInner.id = `${resource.id}-progress-bar`;
            progressBarInner.style.width = '0%';

            // Progress percentage
            const progressText = document.createElement('span');
            progressText.id = `${resource.id}-progress`;
            progressText.textContent = '0%';
            progressText.className = 'text-xs text-gray-500';

            progressBar.appendChild(progressBarInner);
            progressBarContainer.appendChild(progressBar);
            progressBarContainer.appendChild(progressText);
            progressCell.appendChild(progressBarContainer);

            row.appendChild(nameCell);
            row.appendChild(statusCell);
            row.appendChild(progressCell);

            tableBody.appendChild(row);
        });
    }

    // Initialize the status table
    document.addEventListener('DOMContentLoaded', () => {
        generateSyncStatusTable();
        setupEventSource();
    });

    let eventSource;

    function setupEventSource() {
        // Close any existing connection
        if (eventSource) {
            eventSource.close();
        }

        // Connect to SSE endpoint
        eventSource = new EventSource('/progress/stream');

        // Handle incoming events
        eventSource.onmessage = function (event) {
            const data = JSON.parse(event.data);

            const statusElement = document.getElementById(`${data.type}-status`);
            const progressElement = document.getElementById(`${data.type}-progress`);
            const progressBarElement = document.getElementById(`${data.type}-progress-bar`);
            const rowElement = document.getElementById(`${data.type}-row`);

            if (statusElement && progressElement && progressBarElement) {
                // Update status message
                statusElement.textContent = data.message;

                // Update progress percentage
                progressElement.textContent = `${data.progress}%`;
                progressBarElement.style.width = `${data.progress}%`;

                // Visual indicators
                if (data.progress < 100) {
                    rowElement.classList.add('bg-blue-50');
                    progressBarElement.classList.add('animate-pulse');
                } else {
                    rowElement.classList.remove('bg-blue-50');
                    progressBarElement.classList.remove('animate-pulse');

                    // Add success/error styling based on message content
                    if (data.message.includes('✅')) {
                        progressBarElement.classList.remove('bg-red-600');
                        progressBarElement.classList.add('bg-green-600');
                    } else if (data.message.includes('❌')) {
                        progressBarElement.classList.remove('bg-blue-600');
                        progressBarElement.classList.add('bg-red-600');
                    }
                }
            }
        };

        eventSource.onerror = function () {
            console.log("EventSource disconnected");
            eventSource.close();
        };
    }

    // Sequential sync of all resources
    async function syncAllResources() {
        let currentIndex = 0;

        // Reset all statuses
        resources.forEach(resource => {
            const statusElement = document.getElementById(`${resource.id}-status`);
            const progressElement = document.getElementById(`${resource.id}-progress`);
            const progressBarElement = document.getElementById(`${resource.id}-progress-bar`);

            if (statusElement) statusElement.textContent = 'Waiting...';
            if (progressElement) progressElement.textContent = '0%';
            if (progressBarElement) {
                progressBarElement.style.width = '0%';
                progressBarElement.classList.remove('bg-green-600', 'bg-red-600');
                progressBarElement.classList.add('bg-blue-600');
            }
        });

        async function processNext() {
            if (currentIndex >= resources.length) return;

            const resource = resources[currentIndex];
            const statusElement = document.getElementById(`${resource.id}-status`);

            if (statusElement) {
                statusElement.textContent = 'Starting sync...';
            }

            try {
                await fetch(resource.endpoint, {
                    method: "POST",
                    headers: {"Content-Type": "application/json"}
                });

                // Move to next resource regardless of success/failure
                // The event source will handle updating the UI with the result
            } catch (error) {
                console.error(`Error syncing ${resource.name}:`, error);
            }

            currentIndex++;
            processNext();
        }

        // Start processing
        await processNext();
    }

    // Update button handler
    document.getElementById("syncAllButton").addEventListener("click", syncAllResources);

    // Save Token, Fetch User & Shop Info
    document.getElementById("connectButton").addEventListener("click", async function () {
        const tokenInput = document.getElementById("tokenInput").value.trim();
        const shopIdInput = document.getElementById("shopIdInput").value.trim();
        const statusMessage = document.getElementById("statusMessage");

        if (!tokenInput) {
            statusMessage.textContent = "❌ Please enter a token.";
            return;
        }
        // Ensure "Bearer " prefix on token
        let token = tokenInput.startsWith("Bearer ") ? tokenInput : `Bearer ${tokenInput}`;

        try {
            statusMessage.textContent = "🔄 Saving Token...";
            let tokenResponse = await fetch("/auth/set-token", {
                method: "POST",
                headers: {"Content-Type": "application/json"},
                body: JSON.stringify({token})
            });
            let tokenResult = await tokenResponse.json();
            if (!tokenResult.success) {
                statusMessage.textContent = "❌ Failed to save token.";
                return;
            }

            statusMessage.textContent = "🔄 Fetching User Info...";
            let userResponse = await fetch("/user/fetch-user", {
                method: "POST",
                headers: {"Content-Type": "application/json"},
                body: JSON.stringify({token})
            });
            let userResult = await userResponse.json();
            if (!userResult.success) {
                statusMessage.textContent = `❌ Failed to fetch user info: ${userResult.message}`;
                return;
            }

            if (!shopIdInput) {
                statusMessage.textContent = "⚠️ User data saved! Please enter a Shop ID.";
                return;
            }

            statusMessage.textContent = "🔄 Fetching Shop Info...";
            let shopResponse = await fetch("/shop/fetch-shop", {
                method: "POST",
                headers: {"Content-Type": "application/json"},
                body: JSON.stringify({shop_id: shopIdInput, token})
            });
            let shopResult = await shopResponse.json();
            if (shopResult.success) {
                statusMessage.textContent = "✅ Shop data saved successfully!";
            } else {
                statusMessage.textContent = `❌ Failed to fetch shop info: ${shopResult.message}`;
            }
        } catch (error) {
            statusMessage.textContent = "❌ Error occurred.";
            console.error("Error:", error);
        }
    });

    // Clear (truncate) all tables in database (Admin action)
    document.getElementById("clearDatabaseButton").addEventListener("click", async function () {
        const clearStatus = document.getElementById("clearStatusMessage");
        if (!confirm("⚠️ This will delete all data in products, shops, and categories. Are you sure?")) {
            return;
        }
        clearStatus.textContent = "🔄 Clearing database...";
        try {
            let response = await fetch("/admin/clear-database", {
                method: "POST",
                headers: {"Content-Type": "application/json"}
            });
            let result = await response.json();
            if (result.success) {
                clearStatus.textContent = result.message;
            } else {
                clearStatus.textContent = "❌ Failed to clear database.";
            }
        } catch (error) {
            clearStatus.textContent = "❌ Error clearing database.";
            console.error("Error:", error);
        }
    });
</script>

<script>
    // Define required scopes in an array for better maintainability
    const requiredScopes = [
        'selldone:identification',
        'backoffice:shop:read',
        'backoffice:order:read',
        'backoffice:product:read',
        'backoffice:category:read',
        'backoffice:customer:read'
    ];

    // Build the URL dynamically
    const baseUrl = 'https://selldone.com/auth/erp';
    const queryString = requiredScopes
        .map(scope => `scopes[]=${encodeURIComponent(scope)}`)
        .join('&');

    // Set the href attribute
    document.getElementById('createTokenLink').href = `${baseUrl}?${queryString}`;
</script>

</body>
</html>