<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>Selldone API Connector</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="flex items-center justify-center min-h-screen bg-gray-100">
<div class="bg-white p-6 md:p-8 rounded-lg shadow-lg max-w-lg w-full">
    <h1 class="text-2xl font-bold text-gray-700 text-center">Selldone API Connector</h1>

    <!-- 🔗 Access Token Link Section -->
    <div class="mt-6 p-4 border rounded-md bg-gray-50">
        <p class="text-sm text-gray-500">
            To generate your access token, click the link below, complete the process, and then copy the token.
        </p>
        <a id="createTokenLink"
           target="_blank"
           rel="noopener noreferrer"
           class="block mt-2 text-blue-600 hover:underline">
            Create Access Token
        </a>
    </div>

    <!-- ✅ Authentication Section -->
    <div class="mt-6 space-y-4">
        <div>
            <label class="block text-sm text-gray-500 mb-1">Enter Bearer Token:</label>
            <input id="tokenInput" type="text"
                   class="w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                   placeholder="Paste your Bearer token here...">
        </div>
        <div>
            <label class="block text-sm text-gray-500 mb-1">Enter Shop ID:</label>
            <input id="shopIdInput" type="text"
                   class="w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                   placeholder="Enter Shop ID here...">
        </div>
        <button id="connectButton"
                class="w-full bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600 transition">
            Save & Fetch Data
        </button>
        <p id="statusMessage" class="text-sm text-gray-600 mt-2 text-center"></p>
    </div>

    <!-- ✅ Data Synchronization Section -->
    <div class="mt-8 border-t pt-6">
        <h2 class="text-lg font-semibold text-gray-700 text-center">Data Synchronization</h2>
        <button id="fetchProductsButton"
                class="w-full mt-4 bg-purple-500 text-white px-4 py-2 rounded-md hover:bg-purple-600 transition">
            Sync Categories & Fetch Products
        </button>
        <p id="categoriesStatusMessage" class="text-sm text-gray-600 mt-2 text-start"></p>
        <p id="productsStatusMessage" class="text-sm text-gray-600 mt-2 text-start"></p>
        <p id="customersStatusMessage" class="text-sm text-gray-600 mt-2 text-start"></p>

    </div>

    <!-- ✅ Clear Database Section -->
    <div class="mt-8 border-t pt-6">
        <h2 class="text-lg font-semibold text-gray-700 text-center">Admin Actions</h2>
        <button id="clearDatabaseButton"
                class="w-full mt-4 bg-red-500 text-white px-4 py-2 rounded-md hover:bg-red-600 transition">
            Clear All Data
        </button>
        <p id="clearStatusMessage" class="text-sm text-gray-600 mt-2 text-center"></p>
    </div>

    <!-- ✅ NocoDB Setup Section -->
    <div class="mt-8 border-t pt-6">
        <h2 class="text-lg font-semibold text-gray-700 text-center">NocoDB Setup</h2>
        <p class="text-sm text-gray-500 mt-2">
            Use the following SQL connection details in NocoDB:
        </p>
        <div class="mt-2 bg-gray-100 p-2 rounded text-sm font-mono text-blue-600">
            SQL Host: host.docker.internal<br/>
            SQL Port: <%= DB_CONFIG.port %><br/>
            Database: <%= DB_CONFIG.database %><br/>
            Example SQL Address: host.docker.internal:<%= DB_CONFIG.port %>/<%= DB_CONFIG.database %>
        </div>
    </div>
</div>

<script>
    // Add this to your script section
    let eventSource;

    function setupEventSource() {
        // Close any existing connection
        if (eventSource) {
            eventSource.close();
        }

        // Connect to SSE endpoint
        eventSource = new EventSource('/progress/stream');

        // Handle incoming events
        eventSource.onmessage = function (event) {
            const data = JSON.parse(event.data);

            // Format the progress display
            const progressText = data.progress < 100 ? `[${data.progress}%] ` : '';

            let statusMessage;
            // Select the appropriate status element based on data type
            if (data.type === 'categories') {
                statusMessage = document.getElementById("categoriesStatusMessage");
                statusMessage.textContent = `📁 Categories: ${progressText}${data.message}`;
            } else if (data.type === 'products') {
                statusMessage = document.getElementById("productsStatusMessage");
                statusMessage.textContent = `📦 Products: ${progressText}${data.message}`
            } else if (data.type === 'customers') {
                statusMessage = document.getElementById("customersStatusMessage");
                statusMessage.textContent = `👥 Customers: ${progressText}${data.message}`
            } else {
                return;
            }

            // Add visual indicator
            if (data.progress < 100) {
                statusMessage.classList.add('animate-pulse');
            } else {
                statusMessage.classList.remove('animate-pulse');
            }
        };

        eventSource.onerror = function () {
            console.log("EventSource disconnected");
            eventSource.close();
        };
    }

    // Setup SSE when page loads
    document.addEventListener('DOMContentLoaded', setupEventSource);

    // Update the fetch products button event listener
    document.getElementById("fetchProductsButton").addEventListener("click", async function () {
        const categoriesStatus = document.getElementById("categoriesStatusMessage");
        const productsStatus = document.getElementById("productsStatusMessage");
        const customersStatus = document.getElementById("customersStatusMessage");

        // Clear previous messages
        categoriesStatus.textContent = "📁 Categories: Starting sync...";
        productsStatus.textContent = "📦 Products: Waiting for categories to complete...";
        customersStatus.textContent = "👥 Customers: Waiting for products to complete...";

        try {
            // First fetch categories
            let categoryResponse = await fetch("/categories/fetch-categories", {
                method: "POST",
                headers: {"Content-Type": "application/json"}
            });


            // After categories are done, start products
            productsStatus.textContent = "📦 Products: Starting sync...";

            let productResponse = await fetch("/products/fetch-products", {
                method: "POST",
                headers: {"Content-Type": "application/json"}
            });

            // Fetch customers:
            customersStatus.textContent = "👥 Customers: Starting sync...";
            let customerResponse = await fetch("/customers/fetch-customers", {
                method: "POST",
                headers: {"Content-Type": "application/json"}
            });

        } catch (error) {
          //  categoriesStatus.textContent = "❌ Error syncing data.";
          //  productsStatus.textContent = "❌ Error syncing data.";
          //  customersStatus.textContent = "❌ Error syncing data.";
            console.error("Error:", error);
        }
    });

    // Save Token, Fetch User & Shop Info
    document.getElementById("connectButton").addEventListener("click", async function () {
        const tokenInput = document.getElementById("tokenInput").value.trim();
        const shopIdInput = document.getElementById("shopIdInput").value.trim();
        const statusMessage = document.getElementById("statusMessage");

        if (!tokenInput) {
            statusMessage.textContent = "❌ Please enter a token.";
            return;
        }
        // Ensure "Bearer " prefix on token
        let token = tokenInput.startsWith("Bearer ") ? tokenInput : `Bearer ${tokenInput}`;

        try {
            statusMessage.textContent = "🔄 Saving Token...";
            let tokenResponse = await fetch("/auth/set-token", {
                method: "POST",
                headers: {"Content-Type": "application/json"},
                body: JSON.stringify({token})
            });
            let tokenResult = await tokenResponse.json();
            if (!tokenResult.success) {
                statusMessage.textContent = "❌ Failed to save token.";
                return;
            }

            statusMessage.textContent = "🔄 Fetching User Info...";
            let userResponse = await fetch("/user/fetch-user", {
                method: "POST",
                headers: {"Content-Type": "application/json"},
                body: JSON.stringify({token})
            });
            let userResult = await userResponse.json();
            if (!userResult.success) {
                statusMessage.textContent = `❌ Failed to fetch user info: ${userResult.message}`;
                return;
            }

            if (!shopIdInput) {
                statusMessage.textContent = "⚠️ User data saved! Please enter a Shop ID.";
                return;
            }

            statusMessage.textContent = "🔄 Fetching Shop Info...";
            let shopResponse = await fetch("/shop/fetch-shop", {
                method: "POST",
                headers: {"Content-Type": "application/json"},
                body: JSON.stringify({shop_id: shopIdInput, token})
            });
            let shopResult = await shopResponse.json();
            if (shopResult.success) {
                statusMessage.textContent = "✅ Shop data saved successfully!";
            } else {
                statusMessage.textContent = `❌ Failed to fetch shop info: ${shopResult.message}`;
            }
        } catch (error) {
            statusMessage.textContent = "❌ Error occurred.";
            console.error("Error:", error);
        }
    });


    // Clear (truncate) all tables in database (Admin action)
    document.getElementById("clearDatabaseButton").addEventListener("click", async function () {
        const clearStatus = document.getElementById("clearStatusMessage");
        if (!confirm("⚠️ This will delete all data in products, shops, and categories. Are you sure?")) {
            return;
        }
        clearStatus.textContent = "🔄 Clearing database...";
        try {
            let response = await fetch("/admin/clear-database", {
                method: "POST",
                headers: {"Content-Type": "application/json"}
            });
            let result = await response.json();
            if (result.success) {
                clearStatus.textContent = result.message;
            } else {
                clearStatus.textContent = "❌ Failed to clear database.";
            }
        } catch (error) {
            clearStatus.textContent = "❌ Error clearing database.";
            console.error("Error:", error);
        }
    });
</script>


<script>
    // Define required scopes in an array for better maintainability
    const requiredScopes = [
        'selldone:identification',
        'backoffice:shop:read',
        'backoffice:order:read',
        'backoffice:product:read',
        'backoffice:category:read',
        'backoffice:customer:read'
    ];

    // Build the URL dynamically
    const baseUrl = 'https://selldone.com/auth/erp';
    const queryString = requiredScopes
        .map(scope => `scopes[]=${encodeURIComponent(scope)}`)
        .join('&');

    // Set the href attribute
    document.getElementById('createTokenLink').href = `${baseUrl}?${queryString}`;
</script>

</body>
</html>
